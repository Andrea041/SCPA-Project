# Documentazione del Codice

## Obiettivo Generale del Codice
Il codice fornito ha lo scopo di analizzare e calcolare le prestazioni di matrici sparse in formato Matrix Market.
Utilizza funzioni per preprocessare i file di matrici, eseguire operazioni seriali sulle matrici e calcolare metriche di performance come tempo medio,
FLOPS (Floating Point Operations Per Second) e MFLOPS (Mega FLOPS).
I risultati vengono memorizzati in strutture dati collegate e stampati per analisi successive.

---

## Struttura del Codice e Funzioni

### 1. **`main`**
- **Obiettivo:**
  Itera su un insieme di matrici, preprocessa i file, calcola le performance e memorizza i risultati.
- **Collegamento:**
  - Chiama `preprocess_matrix` per leggere i file delle matrici.
  - Chiama `serial_csr` (da un file esterno) per calcolare i risultati seriali.
  - Chiama `calculate_performance` per calcolare le metriche finali.
  - Stampa i risultati intermedi e finali con `print_results` e `print_results1`.
- **Return:**
  Restituisce `EXIT_SUCCESS` alla fine dell'esecuzione.

### 2. **`preprocess_matrix`**
- **Obiettivo:**
  Legge una matrice da un file in formato Matrix Market, ne estrae le dimensioni e i valori, e li memorizza in una struttura `matrixData`.
- **Collegamento:**
  - Viene chiamata dal `main` per ogni matrice.
  - Si appoggia a funzioni della libreria esterna `mmio.h` per leggere il file Matrix Market.
- **Return:**
  Restituisce una struttura `matrixConst` contenente le dimensioni della matrice e il numero di elementi non zero.

### 3. **`calculate_performance`**
- **Obiettivo:**
  Calcola le metriche di performance (tempo medio, FLOPS, MFLOPS) a partire da una lista di risultati seriali.
- **Collegamento:**
  - Viene chiamata dal `main` per ogni matrice per calcolare i risultati finali.
- **Return:**
  Restituisce un puntatore a una struttura `matrixResultSerialFINAL` contenente le metriche calcolate.

### 4. **`print_results`**
- **Obiettivo:**
  Stampa i risultati finali (tempo medio, FLOPS, MFLOPS) contenuti in una lista di `matrixResultSerialFINAL`.
- **Collegamento:**
  - Viene chiamata alla fine del `main` per visualizzare i risultati finali.
- **Return:**
  Nessuno (void).

### 5. **`print_results1`**
- **Obiettivo:**
  Stampa i risultati intermedi (seconds) contenuti in una lista di `matrixResultSerial`.
- **Collegamento:**
  - Viene chiamata durante il `main` per visualizzare i risultati parziali delle iterazioni.
- **Return:**
  Nessuno (void).

---

## Strutture Dati Principali

### 1. **`struct matrixResultSerial`**
- **Descrizione:**
  Memorizza i risultati intermedi di una singola iterazione di calcolo seriale.
- **Campi principali:**
  - `nameMatrix`: Nome della matrice.
  - `seconds`: Tempo impiegato.
  - `next`: Puntatore al prossimo risultato.

### 2. **`struct matrixResultSerialFINAL`**
- **Descrizione:**
  Memorizza i risultati finali di una matrice, con metriche calcolate.
- **Campi principali:**
  - `nameMatrix`: Nome della matrice.
  - `avarangeSeconds`: Tempo medio calcolato.
  - `avarangeFlops`: FLOPS calcolati.
  - `avarangeMegaFlops`: MFLOPS calcolati.
  - `nextNode`: Puntatore al prossimo risultato finale.

### 3. **`struct matrixData`**
- **Descrizione:**
  Contiene i dati della matrice letti dal file.
- **Campi principali:**
  - `row_indices`: Indici delle righe.
  - `col_indices`: Indici delle colonne.
  - `values`: Valori della matrice.

### 4. **`struct matrixConst`**
- **Descrizione:**
  Contiene le dimensioni e il numero di elementi non zero della matrice.
- **Campi principali:**
  - `M`: Numero di righe.
  - `N`: Numero di colonne.
  - `nz`: Numero di elementi non zero.

---

## Librerie Esterne

- **`csrSerialized.h`**: Utilizzata per eseguire calcoli seriali sulle matrici in formato CSR.
- **`mmio.h`**: Libreria per leggere file in formato Matrix Market.
- **`matrixLists.h`**: Fornisce strumenti per gestire le liste collegate utilizzate nel codice.
- **`data_structure.h`**: Contiene le definizioni delle strutture dati utilizzate nel codice.

---

## Collegamenti tra Funzioni
1. **`main`**:
   - Chiama `preprocess_matrix`, `calculate_performance`, `print_results1` e `print_results`.
   - Utilizza i dati e i risultati intermedi generati dalle altre funzioni per gestire il flusso complessivo.

2. **`preprocess_matrix`**:
   - Fornisce i dati di input necessari per `serial_csr` e per costruire i risultati intermedi.

3. **`calculate_performance`**:
   - Utilizza i risultati intermedi generati da `serial_csr` e memorizzati in una lista di `matrixResultSerial` per calcolare metriche finali.

4. **`print_results` e `print_results1`**:
   - Stampa i risultati intermedi e finali, aiutando nella verifica e nell'analisi dei dati.

---



